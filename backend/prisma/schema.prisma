// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum Role {
  TEACHER
  ADMIN
}

enum AttendanceCategory {
  PENGAJARAN // Multi-sesi per hari
  KEHADIRAN_KERJA // Sekali check-in/out per hari
}

enum AttendanceStatus {
  HADIR
  TERLAMBAT
  PULANG_CEPAT
  IZIN
  ABSEN
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

// MODELS

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  password           String
  name               String
  profilePhotoUrl    String?
  role               Role               @default(TEACHER)
  attendanceCategory AttendanceCategory

  // Relations
  schedules          Schedule[]
  attendanceRecords  AttendanceRecord[]
  leaveRequests      LeaveRequest[]
  approvedLeaves     LeaveRequest[]     @relation("ApprovedByAdmin")

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Schedule {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime
  endTime   DateTime
  latitude  Float
  longitude Float
  radius    Int // dalam meter

  // Relations
  assignedTo   User @relation(fields: [assignedToId], references: [id])
  assignedToId Int

  attendanceRecords AttendanceRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AttendanceRecord {
  id               Int              @id @default(autoincrement())
  checkInTime      DateTime
  checkInPhotoUrl  String
  checkInLatitude  Float
  checkInLongitude Float
  checkOutTime     DateTime?
  checkOutPhotoUrl String?
  checkOutLatitude Float?
  checkOutLongitude Float?
  status           AttendanceStatus

  // Relations
  user     User @relation(fields: [userId], references: [id])
  userId   Int
  schedule Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveRequest {
  id        Int         @id @default(autoincrement())
  reason    String
  startDate DateTime
  endDate   DateTime
  status    LeaveStatus @default(PENDING)

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int

  approvedBy   User? @relation("ApprovedByAdmin", fields: [approvedById], references: [id])
  approvedById Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}